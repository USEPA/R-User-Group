---
title: "Visualizing Spatial Data in R"
author: "Kristin Broms, Neptune & Co."
date: "October 18, 2017"
output: 
  slidy_presentation:
    font_adjustment: -1
---


```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE, cache=FALSE)
## load R objects and static ggmap object
load("Presentation_data.RData")

## Note to users: some of the code chunks have the option eval = FALSE.  That 
## is because they require a different (older) version of ggplot2 to use the 
## ggmap package.  If you evaluate them, then later parts of the code that use 
## the plotly package will crash.  One option is that after you evaluate them, 
## restart R and reload the .RData to continue working through the presentation.

## The network graph may require the following graph package that need to be 
## installed from source.  (This package is not generally required to create  
## similar graphs; they are only required for the example.  See the tutorial for  
## other examples based on csv files.)
# source("https://bioconductor.org/biocLite.R")
# biocLite("graph")

```

## Outline
- Static maps

- 3D maps

- Interactive maps

- Animated maps

- Areal data exploration

- Additional packages

- Appendix
    - Network graph
    - Color
    
As you can see, "spatial data" has come to mean much more than creating a map! Visualizing spatial data is an active area of software development, with many exciting packages and functions becoming available on a regular basis.


## Static map- shapefiles

- View and use shapefiles in R.
```{r static_maps, warning=FALSE, message=FALSE, fig.height=4}
library(rgdal)
streams <- readOGR(dsn = "../data/R_GIS_Layers/", 
                   layer = "Cove_Drainage_WGS84")
summary(streams)
```

## Static map- shapefiles
- base R has some plotting options:
```{r, fig.height=4}
plot(streams, col="blue")
## note that plots using base R may be distorted.
```

## Static map- shapefiles

- ggplot can be utilized for spatial data.
```{r, fig.height=4}
library(ggplot2)
streams_gg <- fortify(streams)  ## or use broom::tidy()
# str(streams_gg)
ggplot() + 
  geom_path(data = streams_gg, 
            aes(x = long, y = lat, group = group), 
                color = "blue", size = 1.5)
## note that without a coordinates correction, the plot may be distorted.
```

## Static map- satellite maps

- View shapefiles on top of google maps.
- library(maps) will also provide useful backgrounds.
```{r static_maps2, warning=FALSE, message=FALSE, eval=FALSE}
library(ggmap)
devtools::install_github("hadley/ggplot2@v2.2.0")
library(ggplot2)
myLocation <- c(lon = -109.2279, lat = 36.545) 
myMap <- get_map(location = myLocation, source = "google", 
                 maptype = "satellite", crop = FALSE, zoom = 13)
g <- ggmap(myMap, darken = c(0.25, "white"))
g + 
  geom_path(data = streams_gg, 
            aes(x = long, y = lat, group = group), 
            color = "lightblue", size = 1.5)
ggsave("shp_and_ggmap.png", dpi = 72) 
```
<!-- The following line of code is written in html and it loads an image into the presentation. -->
![](shp_and_ggmap.png){width=500px}

## Static maps - with data and formatting
```{r add_data, eval=FALSE}
library(dplyr)
alum_data <- plot_data %>% filter(Analyte == "ALUMINUM")
g + 
  geom_path(data = streams_gg, 
            aes(x = long, y = lat, group = group), 
            color = "lightblue", size = 1.5) +
  geom_point(data=alum_data, 
             aes(x = Longitude, y = Latitude, size = Result, fill = Result),
             shape = 21, alpha = 0.9) +
  scale_fill_gradient(low = "#1f77b4", high = "#d62728") +
  scale_size(range = c(2, 8)) +
  guides(size = FALSE) +
  coord_equal() 
ggsave("static_map.png", dpi = 72) 
```

```{r}
head(alum_data)
```

## Static map - with data and formatting

![](static_map.png){width=800px}


## Using R in place of ArcGIS 

- Common ArcGIS functions, such as unions and intersections, can be done in R.  The main advantages are that all manipulations are recorded and reproducible, and code can be automated.

- Previous R User Group Presentation:  
    - https://usepa.sharepoint.com/sites/ORD_Community/R-User-Group/Presentations/Forms/AllItems.aspx?id=%2Fsites%2FORD%5FCommunity%2FR%2DUser%2DGroup%2FPresentations%2F2015%20Presentations%20and%20Recordings
    
    - https://github.com/USEPA/R-User-Group/tree/master/presentationCode/Weber_Spatial_Data_In_R_The_Basics.md
    
    - https://mhweber.github.io/gis_in_action_r_spatial/



## 3D maps

- Package options
    - scatterplot3d: not interactive.
    - plot3D from the "rgl" library: many options and interactive.
    - plotly: needs more development?

- Difficult, but not impossible, to get 3D images projected onto shapefiles or maps.  See next slide.

## Lollipop example, using scatterplot3d
```{r, eval=FALSE}
library(scatterplot3d)
with(alum_data, {
  lollipop_plot <- scatterplot3d(streams_gg$long, streams_gg$lat, 
                                 rep(0, length(streams_gg$long)),  # x y and z axis
                              color = "blue", pch = 16, type = "p",
                              angle = 120,            
                              scale.y = 1.75,           
                              main = "Example Lollipop plot",
                              xlab = "Longitude",
                              ylab = "Latitude",
                              zlab = "Concentration values",
                              xlim = c(-109.273, -109.15),
                              ylim = c(36.50, 36.59),
                              zlim = range(0, 46000),
                              grid = TRUE,
                              box = FALSE)
  
  # add the legend
  legend("topright", inset = 0.07,      
         bty = "n", 
         title = "Type of Results",
         c("High","Low"), 
         fill = c("#1B9E77", "#D95F02"))
  
  # add the lollipop points
  lollipop_plot$points3d(Longitude, Latitude, Result,        
                      col = "#282830", 
                      pch = 21, 
                      bg = ifelse(Result > 10000, "#1B9E77", "#D95F02"), 
                      lwd = 1,        
                      type = "h",      
                      cex = (Result / 50000) + 1)
})

```



## Lollipop example

![](lollipop_samedata1.png){width=600px}

## Lollipop example

![lollipop plot](lollipop.png){width=800px}

(Generated using a modified version of the scatterplot3d function:  https://github.com/USEPA/R-User-Group/tree/master/contributedCode/scatterplot3dMap)

Reference:  Beaulieu, et al. 2016.  Estimates of reservoir methane emissions based on a spatially balanced probabilistic-survey. Limnology and Oceanography, 61: S27-S40.


## 3D map example (interactive)
```{r, fig.height=4, warning=FALSE, message=FALSE}
library(rgl)
library(dplyr)
plot_3d <- with(alum_data, 
  plot3d(Longitude, Latitude, log(Result),        # x y and z axis
         col = ifelse(Result > 10000, "#1B9E77", "#D95F02"), size = 5,
         type = "p"))
rglwidget(elementId = "plot3drgl") # to show in presentation
```


## 3D map- plotly
```{r, fig.height=4, warning=FALSE, message=FALSE}
## plotly recommends the development version of ggplot2, but will also work with the
## latest version of the package, version 2.2.1 
# devtools::install_github('hadley/ggplot2')
# library(ggplot2)
library(devtools)
library(dplyr)
library(plotly)

p <- plot_ly(alum_data, 
             x = ~Longitude, y = ~Latitude, z = ~Result,
             marker = list(color = ~Result, 
                      colorscale = c('#FFE1A1', '#683531'), showscale = TRUE)) %>%
  add_markers() 
```


## 3D map- plotly
```{r, fig.height=4, warning=FALSE, message=FALSE}
p
```

## Interactive maps- plotly
```{r plotly, echo=TRUE, warning=FALSE, message=FALSE}
interactive_map <- g +  
  geom_point(data = alum_data, 
             aes(x = Longitude, y = Latitude, size = Result, fill = Result),
             color = "#000000", shape = 21, alpha = 0.8) +
  scale_fill_gradient(low = "#1f77b4", high = "#d62728",
                      guide = "legend") +
  scale_size(range = c(2, 8)) +
  coord_equal() +
  ggtitle("ALUMINUM")

```


## Interactive maps- plotly
```{r, warning=FALSE, message=FALSE, fig.height=4.5}
ggplotly(interactive_map + theme_void(), filename="plotly")
```


## Interactive maps cont'd
- ggmap and plotly are not completely compatible. (ggmap uses ggplot2.2.0, plotly wants the latest development version of ggplot2.)

- "leaflet" is also javascript-based and is popular for interactive maps.
    - Its implementation requires more knowledge but its end product is more flexible.

- "ggiraph" also makes ggplot figures interactive.  It currently has limited uses but may be expanding.


## Animated maps
```{r, eval=FALSE}
library(animation)
ani.record(reset = TRUE)
for(a in unique(plot_data$Analyte)) { 
  plot_data_a <- subset(plot_data, Analyte == a)
  animated_maps <- g + 
    geom_path(data = streams_gg, 
              aes(x = long, y = lat, group = group),
              size = 1.5, color = 'lightblue') +
    geom_point(data = plot_data_a, 
               aes(x = Longitude, y=Latitude, size = Result, fill = Result),
               shape = 21, alpha = 0.8) +
    scale_fill_gradient(low = "#1f77b4", high = "#d62728") +
    scale_size(range = c(2, 8)) +
    guides(size = FALSE) +
    coord_equal() +
    ggtitle(a)
  
  print(animated_maps)
  ani.record()
}
oopts = ani.options(interval = 1)
ani.replay()
saveHTML(ani.replay(), img.name = "animation_plot", 
         htmlfile = "animation_5metals.html", ani.width=600, ani.height=400)
```

## Animated maps
<iframe src="animation_5metals.html" width=800 height=500></iframe>

- Alternate package: library(gganimate)

- Alternate package: library(anim.plots)




## Spatial data exploration- Moran's I

- Explore areal data
```{r, fig.height = 4}
# Show neighbors on map of subbasins
library(sp)
class(lulc.sp1)
spplot(lulc.sp1, zcol = "PCTHERB", col = "black", 
       main = "Percent Herb")
```


## Spatial data exploration- Moran's I
```{r, warning=FALSE, message=FALSE}
library(spdep)

## determine who shares a border
ctchmt.nb1 <- poly2nb(lulc.sp1, queen = TRUE)
# put neighbors into list
ctchmt.nbwts.list <- nb2listw(ctchmt.nb1, style = "B")

moran.test(lulc.sp1$PCTHERB, ctchmt.nbwts.list)
```

## Spatial data exploration- Moran's I cont'd

- Lagged Moran's scatterplot
```{r, fig.height=4, warning=FALSE, message=FALSE}
par(mar=c(5, 5, 2, 2))
moran.plot(lulc.sp1$PCTHERB, listw = ctchmt.nbwts.list, 
           labels = lulc.df1$PCTHERB,
           xlab = "PCTHERB", ylab = "Spatially Lagged PCTHERB",
           main = "Moran Plot for PCT HERB")
```


## Additional Packages 
- useR! 2017 Conference
    - <https://gist.github.com/anonymous/3d5b56cb16526db96dcaa0a579980187>
 
- **sf**
    - To replace the "sp" package?
    - Better integration with tidyverse and ggplot2?
    
- **tmap**
    - Static or interactive maps
    - "The plotting syntax is based on that of ggplot2" 
    - BUT the package uses a completely separate set of functions 
    - <https://cran.r-project.org/web/packages/tmap/vignettes/tmap-nutshell.html>
 
 - **cartography**
    - Improves base R plotting
    
- **choroplethr** 
    - Specifically for choropleth maps
    - <https://www.trulia.com/blog/tech/the-choroplethr-package-for-r/>



## Appendix:  Interactive network graph
- <http://kateto.net/network-visualization>
```{r network_code, warning=FALSE, message=FALSE}
library(magrittr)  ## for %<>% function
library(dplyr)  
library(Rgraphviz)  ## to convert data to necessary data types
library(visNetwork)  ## to create the interactive network graph
network_interactive <- function(g, nodes, coords){
  ## first, switch graph construction to data frames:
  nNodes <- length(nodes)
  nodes_df <- matrix(NA, nrow=nNodes, 4)  # save first 4 attributes
  for (i in 1:nNodes){
    nodes_df[i, ] <- unlist(jsonlite::fromJSON(nodes[[i]]))[1:4]
  }
  nodes_df <- as.data.frame(nodes_df, stringsAsFactors=FALSE)
  
  ## because edges uses the names, need id to equal names of nodes, not numbers
  names(nodes_df)[1:3] <- c("old_id", "id", "type")
  
  ## and id column needs to go first: (only for igraph package, not visNetwork)
  ## igraph packge was used to help decide node coordinates
  nodes_df <- nodes_df[, c('id', 'old_id', 'type')]

  g_edges <- Rgraphviz::buildEdgeList(g)
  nEdges <- length(g_edges)
  edges_df <- NULL
  for (i in 1:nEdges){
    tmp <- c(from=g_edges[[i]]@from,
             to=g_edges[[i]]@to,
             unlist(g_edges[[i]]@attrs))
    edges_df %<>% bind_rows(tmp)
  }
  edges_df$weight <- as.numeric(edges_df$weight)
  
  ## Add layer info/ color column
  nodes_df$col_layer <- 
    ifelse(nodes_df$id %in%  grep("MainInput", nodes_df$id, value=T), 1, # 
           ifelse(nodes_df$id %in% grep("OtherInput", nodes_df$id, value=T), 3,
           ifelse(nodes_df$id %in%  grep("Midvalue", nodes_df$id, value=T),  4,
           ifelse(nodes_df$id %in%  grep("MidEqn", nodes_df$id, value=T),  5,
                  6))))
  
  ##  add coordinates to determine layout of each node:
  nodes_df <- full_join(nodes_df, coords)

  ## specify colors to use for each col_layer
  graph_colors <- c("gold", "darkorange", "tomato", 
                    "palegreen", "seagreen", "royalblue")
  # frame = borders
  frame_colors <- c("gold3", "darkorange3", "tomato4", 
                    "palegreen3", "seagreen4", "royalblue4")
  ## (visNetwork doesn't like color names with numbers)
  frame_colors_rgb <- rgb(t(col2rgb(frame_colors)), maxColorValue = 255)

  ## Add attributes so that the graph looks good:
  nodes_df$shape <- "ellipse"
  nodes_df$color.background <- graph_colors[nodes_df$col_layer] 
  nodes_df$color.border <- frame_colors_rgb[nodes_df$col_layer]
  nodes_df$color.highlight.border <- "darkred"
  
  edges_df$arrows <- "to"  # draw arrows on the edges.
  edges_df$color.highlight <- "black"
  
  network <- visNetwork::visNetwork(nodes_df, edges_df, width="100%", physics = TRUE) %>%
    visNetwork::visIgraphLayout() %>%
    visNetwork::visOptions(highlightNearest = TRUE, nodesIdSelection = TRUE,
               manipulation = FALSE) %>%
    visNetwork::visEdges(color = "slategray", smooth = list(roundess = 1)) %>%
    visNetwork::visNodes(font = list(size = 22), shape="ellipse")

  return(network)
}

```


## Appendix:  Interactive network graph
```{r network_graph, message=FALSE, warning=FALSE}
network_interactive(g = networkDag, nodes = networkNodes, coords = networkCoords)
```


## Appendix: Color

- RColorBrewer
    - library(RColorBrewer)
    - <http://colorbrewer2.org>
    - options to be colorblind safe and printer-friendly
- Cheatsheet with color names and color ramps
    - <https://www.nceas.ucsb.edu/~frazier/RSpatialGuides/colorPaletteCheatsheet.pdf>
- Tool to find complimentary colors and different hues
    - <https://www.hexcolortool.com/>
    - Use "Digital Color Meter" (Macs only) as a starting point?
    - Or use these codes as starting point: <http://cloford.com/resources/colours/500col.htm>
- Test if colorblind safe:  http://terrymun.com/playground/colorblind/


## Appendix: Color

```{r palette_change_code, echo = TRUE, fig.height=1.5, fig.width=3}
par(mar=rep(0, 4))  ## change margins so plot fills entire space
## default colors:
plot(1:8, pch=16, cex=5, col=1:8)
## Defining a new palette
new_palette <- c("darkred", "chartreuse", "turquoise", "purple",  
                 "gray45", "plum", "black", "#F08800")
palette(new_palette)
plot(1:8, pch=16, cex=5, col=1:8)
palette("default")  ## return palette to default colors
```


## Version Control
```{r}
sessionInfo()
```
